nameOverride: mimir
fullnameOverride: mimir
image:
  repository: docker.io/grafana/mimir
nginx:
  nodeSelector:
    team: devops
    service: devops-infra
    performance_type: memory
  tolerations:
  - key: performance_type
    operator: Equal
    value: mem
    effect: NoSchedule
  replicas: 2
{% if legacy_host is defined %}
  nginxConfig:
    file: |
{%- raw %}
      worker_processes  5;
      error_log  /dev/stderr {{ .Values.nginx.nginxConfig.errorLogLevel }};
      pid        /tmp/nginx.pid;
      worker_rlimit_nofile 8192;
      events {
        worker_connections  4096;
      }
      http {
        client_body_temp_path /tmp/client_temp;
        proxy_temp_path       /tmp/proxy_temp_path;
        fastcgi_temp_path     /tmp/fastcgi_temp;
        uwsgi_temp_path       /tmp/uwsgi_temp;
        scgi_temp_path        /tmp/scgi_temp;
        default_type application/octet-stream;
        log_format   {{ .Values.nginx.nginxConfig.logFormat }}
        access_log   /dev/stderr  main;
        sendfile     on;
        tcp_nopush   on;
        resolver {{ .Values.global.dnsService }}.{{ .Values.global.dnsNamespace }}.svc.{{ .Values.global.clusterDomain }};
        map $http_x_scope_orgid $ensured_x_scope_orgid {
          default $http_x_scope_orgid;
          "" "{{ include "mimir.noAuthTenant" . }}";
        }
        proxy_read_timeout 300;
        large_client_header_buffers 4 16k;
        server {
          listen 8080;
          location = / {
            return 200 'OK';
            auth_basic off;
          }
          location = /ready {
            return 200 'OK';
            auth_basic off;
          }
          proxy_set_header X-Scope-OrgID $ensured_x_scope_orgid;
          location /distributor {
            set $distributor {{ template "mimir.fullname" . }}-distributor-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
            proxy_pass      http://$distributor:{{ include "mimir.serverHttpListenPort" . }}$request_uri;
          }
          location = /api/v1/push {
            set $distributor {{ template "mimir.fullname" . }}-distributor-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
            proxy_pass      http://$distributor:{{ include "mimir.serverHttpListenPort" . }}$request_uri;
          }
          location /otlp/v1/metrics {
            set $distributor {{ template "mimir.fullname" . }}-distributor-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
            proxy_pass      http://$distributor:{{ include "mimir.serverHttpListenPort" . }}$request_uri;
          }
          location {{ template "mimir.alertmanagerHttpPrefix" . }} {
            set $alertmanager {{ template "mimir.fullname" . }}-alertmanager-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
            proxy_pass      http://$alertmanager:{{ include "mimir.serverHttpListenPort" . }}$request_uri;
          }
          location = /multitenant_alertmanager/status {
            set $alertmanager {{ template "mimir.fullname" . }}-alertmanager-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
            proxy_pass      http://$alertmanager:{{ include "mimir.serverHttpListenPort" . }}$request_uri;
          }
          location = /api/v1/alerts {
            set $alertmanager {{ template "mimir.fullname" . }}-alertmanager-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
            proxy_pass      http://$alertmanager:{{ include "mimir.serverHttpListenPort" . }}$request_uri;
          }
          location {{ template "mimir.prometheusHttpPrefix" . }}/config/v1/rules {
            set $ruler {{ template "mimir.fullname" . }}-ruler.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
            proxy_pass      http://$ruler:{{ include "mimir.serverHttpListenPort" . }}$request_uri;
          }
          location {{ template "mimir.prometheusHttpPrefix" . }}/api/v1/rules {
            set $ruler {{ template "mimir.fullname" . }}-ruler.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
            proxy_pass      http://$ruler:{{ include "mimir.serverHttpListenPort" . }}$request_uri;
          }
          location {{ template "mimir.prometheusHttpPrefix" . }}/api/v1/alerts {
            set $ruler {{ template "mimir.fullname" . }}-ruler.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
            proxy_pass      http://$ruler:{{ include "mimir.serverHttpListenPort" . }}$request_uri;
          }
          location = /ruler/ring {
            set $ruler {{ template "mimir.fullname" . }}-ruler.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
            proxy_pass      http://$ruler:{{ include "mimir.serverHttpListenPort" . }}$request_uri;
          }
          location {{ template "mimir.prometheusHttpPrefix" . }} {
            set $query_frontend {{ template "mimir.fullname" . }}-query-frontend.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
            proxy_pass      http://$query_frontend:{{ include "mimir.serverHttpListenPort" . }}$request_uri;
          }
          location = /api/v1/status/buildinfo {
            set $query_frontend {{ template "mimir.fullname" . }}-query-frontend.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
            proxy_pass      http://$query_frontend:{{ include "mimir.serverHttpListenPort" . }}$request_uri;
          }
          location /api/v1/upload/block/ {
            set $compactor {{ template "mimir.fullname" . }}-compactor.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
            proxy_pass      http://$compactor:{{ include "mimir.serverHttpListenPort" . }}$request_uri;
          }
          location = /api/prom/push {
            set $distributor {{ template "mimir.fullname" . }}-distributor-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
            proxy_pass      http://$distributor:{{ include "mimir.serverHttpListenPort" . }}/api/v1/push;
          }
        }
      }
{% endraw %}
{% endif %}
  image:
    registry: docker.io
{% if certificate_arn is defined %}
  service:
    type: NodePort
{% endif %}
{% if server_host is defined %}
  ingress:
    enabled: true
    annotations:
{% if regist_host is defined %}
      external-dns.alpha.kubernetes.io/hostname: "{{ regist_host }}"
{% endif %}
{% if certificate_arn is defined %}
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/scheme: internal
      alb.ingress.kubernetes.io/certificate-arn: "{{ certificate_arn }}"
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
      alb.ingress.kubernetes.io/tags: "Team=devops,Server=etc,Service=tempo,Security_level=moderate,Environment={{ env }}"
      alb.ingress.kubernetes.io/healthcheck-path: /ready
      alb.ingress.kubernetes.io/security-groups: "{{ security_group_id }}"
      alb.ingress.kubernetes.io/ssl-redirect: '443'
{% else %}
      nginx.ingress.kubernetes.io/ssl-redirect: 'true'
{% endif %}
    hosts:
    - host: "{{ server_host }}"
      paths:
      - path: /
        pathType: Prefix
{% if legacy_host is defined %}
    - host: "{{ legacy_host }}"
      paths:
      - path: /
        pathType: Prefix
{% endif %}
    tls: []
{% endif %}
mimir:
  config: |
    usage_stats:
      installation_mode: helm
    activity_tracker:
      filepath: /active-query-tracker/activity.log
    alertmanager:
      data_dir: /data
      enable_api: true
{% if server_host is defined %}
      external_url: "https://{{ server_host }}/alertmanager"
{% else %}
      external_url: /alertmanager
{% endif %}
      {{- if .Values.alertmanager.zoneAwareReplication.enabled }}
      sharding_ring:
        zone_awareness_enabled: true
      {{- end }}
      {{- if .Values.alertmanager.fallbackConfig }}
      fallback_config_file: /configs/alertmanager_fallback_config.yaml
      {{- end }}
    alertmanager_storage:
      backend: s3
      s3:
        bucket_name: "{{ s3_ruler_bucket }}"
{% if s3_ruler_endpoint is defined %}
        endpoint: "{{ s3_ruler_endpoint }}"
        access_key_id: "{{ s3_ruler_accesskey }}"
        secret_access_key: "{{ s3_ruler_secretkey }}"
        insecure: true
{% else %}
        endpoint: "s3.amazonaws.com"
        region: ap-northeast-2
{% endif %}
    compactor:
      compaction_interval: 30m
      deletion_delay: 2h
      max_closing_blocks_concurrency: 2
      max_opening_blocks_concurrency: 4
      symbols_flushers_concurrency: 4
      data_dir: "/data"
      sharding_ring:
        wait_stability_min_duration: 1m
    distributor:
      ha_tracker:
        enable_ha_tracker: true
        kvstore:
          store: etcd
          etcd:
            endpoints:
            - "{{ etcd_url }}"
{%- raw %}
    frontend:
      align_queries_with_step: true
      log_queries_longer_than: 10s
      parallelize_shardable_queries: true
      {{- if index .Values "results-cache" "enabled" }}
      results_cache:
        backend: memcached
        memcached:
          timeout: 500ms
          addresses: {{ include "mimir.resultsCacheAddress" . }}
          max_item_size: {{ mul (index .Values "results-cache").maxItemMemory 1024 1024 }}
      cache_results: true
      query_sharding_target_series_per_shard: 2500
      {{- end }}
      {{- if .Values.query_scheduler.enabled }}
      scheduler_address: {{ template "mimir.fullname" . }}-query-scheduler-headless.{{ .Release.Namespace }}.svc:{{ include "mimir.serverGrpcListenPort" . }}
      {{- end }}
    frontend_worker:
      grpc_client_config:
        max_send_msg_size: 419430400
      {{- if .Values.query_scheduler.enabled }}
      scheduler_address: {{ template "mimir.fullname" . }}-query-scheduler-headless.{{ .Release.Namespace }}.svc:{{ include "mimir.serverGrpcListenPort" . }}
      {{- else }}
      frontend_address: {{ template "mimir.fullname" . }}-query-frontend-headless.{{ .Release.Namespace }}.svc:{{ include "mimir.serverGrpcListenPort" . }}
      {{- end }}
    ingester:
      ring:
        final_sleep: 0s
        num_tokens: 512
        tokens_file_path: /data/tokens
        unregister_on_shutdown: false
        {{- if .Values.ingester.zoneAwareReplication.enabled }}
        zone_awareness_enabled: true
        {{- end }}
    ingester_client:
      grpc_client_config:
        max_recv_msg_size: 104857600
        max_send_msg_size: 104857600
    limits:
      max_total_query_length: 12000h
      max_query_parallelism: 240
      max_cache_freshness: 10m
      max_global_series_per_user: 30000000
      max_global_series_per_metric: 500000
      max_global_exemplars_per_user: 100000
      max_label_names_per_series: 300
      ruler_max_rules_per_rule_group: 40
      ingestion_rate: 250000
      accept_ha_samples: true
      ha_replica_label: prometheus_replica
    memberlist:
      abort_if_cluster_join_fails: false
      compression_enabled: false
      join_members:
      - dns+{{ include "mimir.fullname" . }}-gossip-ring.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ include "mimir.memberlistBindPort" . }}
    querier:
      max_concurrent: 16
    query_scheduler:
      max_outstanding_requests_per_tenant: 1600
    ruler:
      alertmanager_url: dnssrvnoa+http://_http-metrics._tcp.{{ template "mimir.fullname" . }}-alertmanager-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}/alertmanager
      enable_api: true
      rule_path: /data
    runtime_config:
      file: /var/{{ include "mimir.name" . }}/runtime.yaml
    blocks_storage:
      backend: s3
      bucket_store:
        {{- if index .Values "chunks-cache" "enabled" }}
        chunks_cache:
          backend: memcached
          memcached:
            addresses: {{ include "mimir.chunksCacheAddress" . }}
            max_item_size: {{ mul (index .Values "chunks-cache").maxItemMemory 1024 1024 }}
            timeout: 450ms
        {{- end }}
        {{- if index .Values "index-cache" "enabled" }}
        index_cache:
          backend: memcached
          memcached:
            addresses: {{ include "mimir.indexCacheAddress" . }}
            max_item_size: {{ mul (index .Values "index-cache").maxItemMemory 1024 1024 }}
        {{- end }}
        {{- if index .Values "metadata-cache" "enabled" }}
        metadata_cache:
          backend: memcached
          memcached:
            addresses: {{ include "mimir.metadataCacheAddress" . }}
            max_item_size: {{ mul (index .Values "metadata-cache").maxItemMemory 1024 1024 }}
        {{- end }}
        sync_dir: /data/tsdb-sync
{% endraw %}
      s3:
        bucket_name: "{{ s3_bucket }}"
{% if s3_endpoint is defined %}
        endpoint: "{{ s3_endpoint }}"
        access_key_id: "{{ s3_accesskey }}"
        secret_access_key: "{{ s3_secretkey }}"
        insecure: true
{% else %}
        endpoint: "s3.amazonaws.com"
        region: ap-northeast-2
{% endif %}
      tsdb:
        dir: /data/tsdb
    ruler_storage:
      backend: s3
      s3:
        bucket_name: "{{ s3_ruler_bucket }}"
{% if s3_ruler_endpoint is defined %}
        endpoint: "{{ s3_ruler_endpoint }}"
        access_key_id: "{{ s3_ruler_accesskey }}"
        secret_access_key: "{{ s3_ruler_secretkey }}"
        insecure: true
{% else %}
        endpoint: "s3.amazonaws.com"
        region: ap-northeast-2
      {{- if index .Values "metadata-cache" "enabled" }}
      cache:
        backend: memcached
        memcached:
          addresses: {{ include "mimir.metadataCacheAddress" . }}
          max_item_size: {{ mul (index .Values "metadata-cache").maxItemMemory 1024 1024 }}
      {{- end }}
{% endif %}
    server:
      grpc_server_max_concurrent_streams: 1000
      grpc_server_max_connection_age: 2m
      grpc_server_max_connection_age_grace: 5m
      grpc_server_max_connection_idle: 1m
      grpc_server_max_recv_msg_size: 104857600
      grpc_server_max_send_msg_size: 104857600
    store_gateway:
      sharding_ring:
        wait_stability_min_duration: 1m
        {{- if .Values.store_gateway.zoneAwareReplication.enabled }}
        kvstore:
          prefix: multi-zone/
        {{- end }}
        tokens_file_path: /data/tokens
        {{- if .Values.store_gateway.zoneAwareReplication.enabled }}
        zone_awareness_enabled: true
        {{- end }}
alertmanager:
  nodeSelector:
    kubernetes.io/arch: amd64
    team: devops
    service: devops-infra
    performance_type: memory
  tolerations:
  - key: performance_type
    operator: Equal
    value: mem
    effect: NoSchedule
  replicas: 3
  readinessProbe:
    failureThreshold: 30
distributor:
  nodeSelector:
    kubernetes.io/arch: amd64
    team: devops
    service: devops-infra
    performance_type: memory
  tolerations:
  - key: performance_type
    operator: Equal
    value: mem
    effect: NoSchedule
  replicas: 3
ingester:
  nodeSelector:
    kubernetes.io/arch: amd64
    team: devops
    service: devops-infra
    performance_type: memory
  tolerations:
  - key: performance_type
    operator: Equal
    value: mem
    effect: NoSchedule
  replicas: 4
  persistentVolume:
{% if volume_size is defined %}
    size: "{{ volume_size }}"
{% else %}
    size: 50Gi
{% endif %}
overrides_exporter:
  nodeSelector:
    kubernetes.io/arch: amd64
    team: devops
    service: devops-infra
    performance_type: memory
  tolerations:
  - key: performance_type
    operator: Equal
    value: mem
    effect: NoSchedule
ruler:
  nodeSelector:
    kubernetes.io/arch: amd64
    team: devops
    service: devops-infra
    performance_type: memory
  tolerations:
  - key: performance_type
    operator: Equal
    value: mem
    effect: NoSchedule
  readinessProbe:
    failureThreshold: 30
querier:
  nodeSelector:
    kubernetes.io/arch: amd64
    team: devops
    service: devops-infra
    performance_type: memory
  tolerations:
  - key: performance_type
    operator: Equal
    value: mem
    effect: NoSchedule
  replicas: 2
  readinessProbe:
    failureThreshold: 30
query_frontend:
  nodeSelector:
    kubernetes.io/arch: amd64
    team: devops
    service: devops-infra
    performance_type: memory
  tolerations:
  - key: performance_type
    operator: Equal
    value: mem
    effect: NoSchedule
query_scheduler:
  nodeSelector:
    kubernetes.io/arch: amd64
    team: devops
    service: devops-infra
    performance_type: memory
  tolerations:
  - key: performance_type
    operator: Equal
    value: mem
    effect: NoSchedule
  replicas: 2
store_gateway:
  nodeSelector:
    kubernetes.io/arch: amd64
    team: devops
    service: devops-infra
    performance_type: memory
  tolerations:
  - key: performance_type
    operator: Equal
    value: mem
    effect: NoSchedule
  persistentVolume:
{% if volume_size is defined %}
    size: "{{ volume_size }}"
{% else %}
    size: 50Gi
{% endif %}
compactor:
  nodeSelector:
    kubernetes.io/arch: amd64
    team: devops
    service: devops-infra
    performance_type: memory
  tolerations:
  - key: performance_type
    operator: Equal
    value: mem
    effect: NoSchedule
  persistentVolume:
{% if volume_size is defined %}
    size: "{{ volume_size }}"
{% else %}
    size: 50Gi
{% endif %}
memcached:
  image:
    repository: docker.io/library/memcached
memcachedExporter:
  image:
    repository: docker.io/prom/memcached-exporter
chunks-cache:
  enabled: true
  nodeSelector:
    team: devops
    service: devops-infra
    performance_type: memory
  tolerations:
  - key: performance_type
    operator: Equal
    value: mem
    effect: NoSchedule
index-cache:
  enabled: true
  nodeSelector:
    team: devops
    service: devops-infra
    performance_type: memory
  tolerations:
  - key: performance_type
    operator: Equal
    value: mem
    effect: NoSchedule
metadata-cache:
  enabled: true
  nodeSelector:
    team: devops
    service: devops-infra
    performance_type: memory
  tolerations:
  - key: performance_type
    operator: Equal
    value: mem
    effect: NoSchedule
results-cache:
  enabled: true
  nodeSelector:
    team: devops
    service: devops-infra
    performance_type: memory
  tolerations:
  - key: performance_type
    operator: Equal
    value: mem
    effect: NoSchedule
minio:
  enabled: false
metaMonitoring:
  serviceMonitor:
    enabled: true
