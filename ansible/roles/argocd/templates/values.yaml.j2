fullnameOverride: argocd
global:
  image:
    repository: quay.io/argoproj/argocd
    tag: "v2.9.5"
configs:
  cm:
    url: "https://{{ server_host }}"
    accounts.deploy: apiKey,login
{% if keycloak_url is defined %}
    oidc.config: |
      name: Keycloak
      issuer: {{ keycloak_url }}/realms/master
      clientID: argocd
      clientSecret: $oidc.keycloak.clientSecret
      requestedScopes:
        - openid
        - profile
        - email
        - groups
{% if workflows_url is defined %}
      staticClients:
      - id: argo-workflows
        name: Argo Workflow
        redirectURIs:
        - {{ workflows_url }}/oauth2/callback
        secretEnv: ARGO_WORKFLOWS_SSO_CLIENT_SECRET
{% endif %}
{% endif %}
  rbac:
    policy.csv: |
      g, G_DevOps, role:admin
    policy.default: role:readonly
  cmp:
    create: true
    plugins:
      avp-kustomize:
        generate:
          command:
          - "sh"
          - "-c"
          - "kustomize build . | argocd-vault-plugin generate -"
        discover:
          find:
            command:
            - "sh"
            - "-c"
            - "find . -name kustomization.yaml | xargs -I {} grep -L helmCharts {}"
      avp-kustomized-helm:
        init:
          command:
          - "sh"
          - "-c"
          - "helm dependency build $ARGOCD_ENV_HELM_DIR"
        generate:
          command:
          - "sh"
          - "-c"
          - "kustomize build . --enable-helm --load-restrictor=LoadRestrictionsNone | argocd-vault-plugin generate -"
        discover:
          find:
            command:
            - "sh"
            - "-c"
            - "find . -name kustomization.yaml | xargs -I {} grep helmCharts {}"
  secret:
    argocdServerAdminPassword: "{{ admin_pass | password_hash('bcrypt') }}"
{% if keycloak_url is defined %}
    extra:
      oidc.keycloak.clientSecret: "{{ client_secret }}"
{% endif %}
controller:
  nodeSelector:
    team: devops
    service: devops-infra
    performance_type: standard
  extraArgs:
  - --redis
  - "{{ redis_addr }}"
  - --redisdb
  - "{{ redis_db }}"
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
server:
  nodeSelector:
    team: devops
    service: devops-infra
    performance_type: standard
  extraArgs:
  - --redis
  - "{{ redis_addr }}"
  - --redisdb
  - "{{ redis_db }}"
{% if certificate_arn is defined %}
  service:
    type: NodePort
    annotations:
      alb.ingress.kubernetes.io/healthcheck-path: /healthz
{% endif %}
{% if server_host is defined %}
  ingress:
    enabled: true
    annotations:
{% if regist_host is defined %}
      external-dns.alpha.kubernetes.io/hostname: "{{ regist_host }}"
{% endif %}
{% if certificate_arn is defined %}
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/scheme: internal
      alb.ingress.kubernetes.io/certificate-arn: "{{ certificate_arn }}"
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
      alb.ingress.kubernetes.io/tags: "Team=devops,Server=etc,Service=argocd-server,Security_level=moderate,Environment={{ env }}"
      alb.ingress.kubernetes.io/backend-protocol: HTTPS
      alb.ingress.kubernetes.io/security-groups: "{{ security_group_id }}"
{% else %}
      cert-manager.io/cluster-issuer: letsencrypt-prod
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/backend-protocol: HTTPS
      nginx.ingress.kubernetes.io/proxy-buffer-size: 16k
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    https: true
{% endif %}
    hosts:
    - "{{ server_host }}"
{% if certificate_arn is defined %}
  ingressGrpc:
    enabled: true
    isAWSALB: true
{% endif %}
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  extensions:
    enabled: true
    image:
      repository: "ghcr.io/argoproj-labs/argocd-extensions"
repoServer:
  nodeSelector:
    kubernetes.io/arch: amd64
    team: devops
    service: devops-infra
    performance_type: standard
  extraArgs:
  - --redis
  - "{{ redis_addr }}"
  - --redisdb
  - "{{ redis_db }}"
  extraContainers:
  - name: avp-kustomize
    image: ghcr.io/kwangil77/helm
    command:
    - "/var/run/argocd/argocd-cmp-server"
    envFrom:
    - secretRef:
        name: argocd-vault-plugin-secret
    securityContext:
      runAsNonRoot: true
      runAsUser: 999
    volumeMounts:
    - name: var-files
      mountPath: /var/run/argocd
    - name: plugins
      mountPath: /home/argocd/cmp-server/plugins
    - name: cmp-tmp
      mountPath: /tmp
    - name: argocd-cmp-cm
      subPath: avp-kustomize.yaml
      mountPath: /home/argocd/cmp-server/config/plugin.yaml
  - name: avp-kustomized-helm
    image: ghcr.io/kwangil77/helm
    command:
    - "/var/run/argocd/argocd-cmp-server"
    env:
    - name: HELM_CACHE_HOME
      value: /tmp
    - name: HELM_CONFIG_HOME
      value: /tmp
    - name: HELM_DATA_HOME
      value: /tmp
    envFrom:
    - secretRef:
        name: argocd-vault-plugin-secret
    securityContext:
      runAsNonRoot: true
      runAsUser: 999
    volumeMounts:
    - name: var-files
      mountPath: /var/run/argocd
    - name: plugins
      mountPath: /home/argocd/cmp-server/plugins
    - name: cmp-tmp
      mountPath: /tmp
    - name: argocd-cmp-cm
      subPath: avp-kustomized-helm.yaml
      mountPath: /home/argocd/cmp-server/config/plugin.yaml
  serviceAccount:
    create: true
    name: argocd-repo-server
  volumes:
  - name: cmp-tmp
    emptyDir: {}
  - name: argocd-cmp-cm
    configMap:
      name: argocd-cmp-cm
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
dex:
{% if keycloak_url is defined %}
  enabled: false
{% else %}
  nodeSelector:
    team: devops
    service: devops-infra
    performance_type: standard
  image:
    repository: ghcr.io/dexidp/dex
{% if workflows_url is defined %}
  env:
    - name: ARGO_WORKFLOWS_SSO_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: argo-workflows-sso
          key: client-secret
{% endif %}
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
{% endif %}
redis:
  enabled: false
applicationSet:
  nodeSelector:
    team: devops
    service: devops-infra
    performance_type: standard
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
notifications:
  nodeSelector:
    team: devops
    service: devops-infra
    performance_type: standard
  argocdUrl: "https://{{ server_host }}"
{% if slack_token is defined %}
  secret:
    items:
      slack-token: "{{ slack_token }}"
  notifiers:
    service.slack: |
      token: $slack-token
  subscriptions:
  - recipients:
    - "slack:{{ slack_channel }}"
    triggers:
    - on-created
    - on-deleted
    - on-deployed
    - on-health-degraded
    - on-sync-failed
    - on-sync-running
    - on-sync-status-unknown
    - on-sync-succeeded
  templates:
    template.app-deployed: |
{%- raw %}
      email:
        subject: New version of an application {{.app.metadata.name}} is up and running.
      message: |
        {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.
      slack:
        attachments: |
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#18BE52",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            },
            {
              "title": "Revision",
              "value": "{{.app.status.sync.revision}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
{% endraw %}
    template.app-health-degraded: |
{%- raw %}
      email:
        subject: Application {{.app.metadata.name}} has degraded.
      message: |
        {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.
        Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
      slack:
        attachments: |-
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#F4C030",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
{% endraw %}
    template.app-sync-failed: |
{%- raw %}
      email:
        subject: Failed to sync application {{.app.metadata.name}}.
      message: |
        {{if eq .serviceType "slack"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}
        Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
      slack:
        attachments: |-
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#E96D76",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
{% endraw %}
    template.app-sync-running: |
{%- raw %}
      email:
        subject: Start syncing application {{.app.metadata.name}}.
      message: |
        The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.
        Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
      slack:
        attachments: |-
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#0DADEA",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
{% endraw %}
    template.app-sync-status-unknown: |
{%- raw %}
      email:
        subject: Application {{.app.metadata.name}} sync status is 'Unknown'
      message: |
        {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.
        Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
        {{if ne .serviceType "slack"}}
        {{range $c := .app.status.conditions}}
            * {{$c.message}}
        {{end}}
        {{end}}
      slack:
        attachments: |-
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#E96D76",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
{% endraw %}
    template.app-sync-succeeded: |
{%- raw %}
      email:
        subject: Application {{.app.metadata.name}} has been successfully synced.
      message: |
        {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.
        Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
      slack:
        attachments: |-
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#18BE52",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
{% endraw %}
  triggers:
    trigger.on-deployed: |
      - description: Application is synced and healthy. Triggered once per commit.
        oncePer: app.status.sync.revision
        send:
        - app-deployed
        when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
    trigger.on-health-degraded: |
      - description: Application has degraded
        send:
        - app-health-degraded
        when: app.status.health.status == 'Degraded'
    trigger.on-sync-failed: |
      - description: Application syncing has failed
        send:
        - app-sync-failed
        when: app.status.operationState.phase in ['Error', 'Failed']
    trigger.on-sync-running: |
      - description: Application is being synced
        send:
        - app-sync-running
        when: app.status.operationState.phase in ['Running']
    trigger.on-sync-status-unknown: |
      - description: Application status is 'Unknown'
        send:
        - app-sync-status-unknown
        when: app.status.sync.status == 'Unknown'
    trigger.on-sync-succeeded: |
      - description: Application syncing has succeeded
        send:
        - app-sync-succeeded
        when: app.status.operationState.phase in ['Succeeded']
{% endif %}
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true